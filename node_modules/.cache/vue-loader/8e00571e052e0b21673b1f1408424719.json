{"remainingRequest":"C:\\Users\\Jonathan\\Documents\\GitHub\\RogueChampions\\RogueChampions\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\Users\\Jonathan\\Documents\\GitHub\\RogueChampions\\RogueChampions\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\Jonathan\\Documents\\GitHub\\RogueChampions\\RogueChampions\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Jonathan\\Documents\\GitHub\\RogueChampions\\RogueChampions\\src\\components\\Downtime.vue?vue&type=template&id=ffd0b1c2&scoped=true&","dependencies":[{"path":"C:\\Users\\Jonathan\\Documents\\GitHub\\RogueChampions\\RogueChampions\\src\\components\\Downtime.vue","mtime":1629961491699},{"path":"C:\\Users\\Jonathan\\Documents\\GitHub\\RogueChampions\\RogueChampions\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Jonathan\\Documents\\GitHub\\RogueChampions\\RogueChampions\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"C:\\Users\\Jonathan\\Documents\\GitHub\\RogueChampions\\RogueChampions\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Jonathan\\Documents\\GitHub\\RogueChampions\\RogueChampions\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}